/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_DEPOSIT_DISCRIMINATOR = new Uint8Array([
  69, 238, 23, 217, 255, 137, 185, 35,
]);

export function getUserDepositDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_DEPOSIT_DISCRIMINATOR
  );
}

export type UserDeposit = {
  discriminator: ReadonlyUint8Array;
  balance: bigint;
};

export type UserDepositArgs = { balance: number | bigint };

export function getUserDepositEncoder(): FixedSizeEncoder<UserDepositArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['balance', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_DEPOSIT_DISCRIMINATOR })
  );
}

export function getUserDepositDecoder(): FixedSizeDecoder<UserDeposit> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['balance', getU64Decoder()],
  ]);
}

export function getUserDepositCodec(): FixedSizeCodec<
  UserDepositArgs,
  UserDeposit
> {
  return combineCodec(getUserDepositEncoder(), getUserDepositDecoder());
}

export function decodeUserDeposit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserDeposit, TAddress>;
export function decodeUserDeposit<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserDeposit, TAddress>;
export function decodeUserDeposit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserDeposit, TAddress> | MaybeAccount<UserDeposit, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserDepositDecoder()
  );
}

export async function fetchUserDeposit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserDeposit, TAddress>> {
  const maybeAccount = await fetchMaybeUserDeposit(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserDeposit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserDeposit, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserDeposit(maybeAccount);
}

export async function fetchAllUserDeposit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserDeposit>[]> {
  const maybeAccounts = await fetchAllMaybeUserDeposit(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserDeposit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserDeposit>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserDeposit(maybeAccount));
}

export function getUserDepositSize(): number {
  return 16;
}
