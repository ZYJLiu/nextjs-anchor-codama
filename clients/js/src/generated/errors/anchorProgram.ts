/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { ANCHOR_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** InvalidAmount: Invalid amount */
export const ANCHOR_PROGRAM_ERROR__INVALID_AMOUNT = 0x1770; // 6000

export type AnchorProgramError = typeof ANCHOR_PROGRAM_ERROR__INVALID_AMOUNT;

let anchorProgramErrorMessages: Record<AnchorProgramError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  anchorProgramErrorMessages = {
    [ANCHOR_PROGRAM_ERROR__INVALID_AMOUNT]: `Invalid amount`,
  };
}

export function getAnchorProgramErrorMessage(code: AnchorProgramError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (anchorProgramErrorMessages as Record<AnchorProgramError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isAnchorProgramError<
  TProgramErrorCode extends AnchorProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    ANCHOR_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
