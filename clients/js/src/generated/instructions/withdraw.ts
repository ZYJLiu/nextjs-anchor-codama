/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ANCHOR_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_DISCRIMINATOR = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof ANCHOR_PROGRAM_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountUserDeposit extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountUserDeposit extends string
        ? WritableAccount<TAccountUserDeposit>
        : TAccountUserDeposit,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawInstructionDataArgs = { amount: number | bigint };

export function getWithdrawInstructionDataEncoder(): FixedSizeEncoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): FixedSizeDecoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawInstructionDataCodec(): FixedSizeCodec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawAsyncInput<
  TAccountUser extends string = string,
  TAccountVault extends string = string,
  TAccountUserDeposit extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  vault?: Address<TAccountVault>;
  userDeposit?: Address<TAccountUserDeposit>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawInstructionDataArgs['amount'];
};

export async function getWithdrawInstructionAsync<
  TAccountUser extends string,
  TAccountVault extends string,
  TAccountUserDeposit extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ANCHOR_PROGRAM_PROGRAM_ADDRESS,
>(
  input: WithdrawAsyncInput<
    TAccountUser,
    TAccountVault,
    TAccountUserDeposit,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountVault,
    TAccountUserDeposit,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ANCHOR_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    userDeposit: { value: input.userDeposit ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.userDeposit.value) {
    accounts.userDeposit.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 100, 101, 112, 111, 115, 105, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.userDeposit),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountVault,
    TAccountUserDeposit,
    TAccountSystemProgram
  >);
}

export type WithdrawInput<
  TAccountUser extends string = string,
  TAccountVault extends string = string,
  TAccountUserDeposit extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  vault: Address<TAccountVault>;
  userDeposit: Address<TAccountUserDeposit>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawInstructionDataArgs['amount'];
};

export function getWithdrawInstruction<
  TAccountUser extends string,
  TAccountVault extends string,
  TAccountUserDeposit extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ANCHOR_PROGRAM_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountUser,
    TAccountVault,
    TAccountUserDeposit,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountVault,
  TAccountUserDeposit,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ANCHOR_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    userDeposit: { value: input.userDeposit ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.userDeposit),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountVault,
    TAccountUserDeposit,
    TAccountSystemProgram
  >);
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof ANCHOR_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    vault: TAccountMetas[1];
    userDeposit: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      vault: getNextAccount(),
      userDeposit: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
